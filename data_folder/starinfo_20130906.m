function s = starinfo(s)
if exist('s','var')&&isfield(s,'t')&&~isempty(s.t)
   daystr = datestr(s.t(1),'yyyymmdd');
else
   daystr=evalin('caller','daystr');
end

toggle = update_toggle;
if isfield(s, 'toggle')
   toggle = catstruct(s.toggle, toggle);
end
s.toggle = toggle;

%get variables from caller 
 
 
% No good time periods ([start end]) for specific pixels 
s.ng=[datenum('15:58:50') datenum('15:58:51') 90  
    datenum('16:22:00') datenum('16:30:40') 90  
datenum('16:37:45') datenum('16:58:10') 10  
datenum('17:10:55') datenum('17:14:40') 10  
datenum('17:17:53') datenum('17:18:00') 10  
datenum('17:18:10') datenum('17:18:20') 10  
datenum('17:19:05') datenum('17:21:45') 10  
datenum('17:24:35') datenum('17:25:40') 10  
datenum('17:25:57') datenum('17:26:05') 10 
datenum('18:53:30') datenum('18:53:35') 90  
datenum('18:54:30') datenum('18:55:50') 90  
datenum('18:59:44') datenum('19:37:40') 90  
datenum('20:03:50') datenum('20:16:15') 90  
datenum('20:28:35') datenum('20:31:05') 90  
datenum('20:40:55') datenum('20:51:27') 90];  
% agricultural smoke [datenum('18:57:45') datenum('18:58:25')] is masked by 
% the STD-based screening. A limitation of the automation. 
s.ng(:,1:2)=s.ng(:,1:2)-datenum('00:00:00')+datenum([daystr(1:4) '-' daystr(5:6) '-' daystr(7:8)]); 
flight=[datenum('15:48:31') datenum('24:21:59')]-datenum('00:00:00')+datenum([daystr(1:4) '-' daystr(5:6) '-' daystr(7:8)]); 
horilegs=[datenum('15:55:00') datenum('16:02:21');... 
datenum('16:16:41') datenum('16:17:43');... 
datenum('16:35:45') datenum('16:41:48');... 
datenum('16:51:13') datenum('16:52:11');... 
datenum('16:57:24') datenum('16:58:04');... 
datenum('17:01:30') datenum('17:06:45');... 
datenum('17:13:22') datenum('17:15:14');... 
datenum('17:21:15') datenum('17:27:25');... 
datenum('17:30:42') datenum('17:33:30');... 
datenum('17:44:34') datenum('17:50:13');... 
datenum('17:58:32') datenum('18:00:21');... 
datenum('18:03:34') datenum('18:16:16');... 
datenum('18:20:03') datenum('18:24:56');... 
datenum('18:33:42') datenum('18:39:51');... 
datenum('18:50:31') datenum('18:51:17');... 
datenum('19:04:50') datenum('19:48:50');... 
datenum('19:51:29') datenum('19:53:12');... 
datenum('19:54:04') datenum('20:09:24');... 
datenum('20:13:41') datenum('20:27:40');... 
datenum('20:32:25') datenum('20:34:17');... 
datenum('21:03:49') datenum('21:06:43');... 
datenum('21:28:17') datenum('21:33:12');... 
datenum('21:58:17') datenum('22:04:04');... 
datenum('22:11:52') datenum('22:15:57');... 
datenum('22:29:33') datenum('22:34:14');... 
datenum('22:44:06') datenum('22:51:25');... 
datenum('23:02:23') datenum('23:09:09');... 
datenum('23:23:02') datenum('23:39:04');... 
datenum('23:51:08') datenum('23:51:37');... 
    ]-datenum('00:00:00')+datenum([daystr(1:4) '-' daystr(5:6) '-' daystr(7:8)]); 
vertprofs=[datenum('15:48:34') datenum('16:16:40');... 
datenum('16:17:44') datenum('16:35:45');... 
datenum('16:41:50') datenum('16:51:02');... 
datenum('16:52:23') datenum('17:01:30');... 
datenum('17:06:45') datenum('17:13:12');... 
datenum('17:15:14') datenum('17:21:39');... 
datenum('17:27:22') datenum('17:43:34');... 
datenum('17:50:31') datenum('18:03:34');... 
datenum('18:16:16') datenum('18:19:57');... 
datenum('18:24:57') datenum('18:31:46');... 
datenum('18:39:51') datenum('18:50:30');... 
datenum('18:51:17') datenum('19:04:53');... 
datenum('19:48:57') datenum('19:51:28');... 
datenum('20:34:18') datenum('21:03:26');... 
datenum('21:06:43') datenum('21:27:52');... 
datenum('21:34:53') datenum('21:57:58');... 
datenum('22:04:05') datenum('22:11:51');... 
datenum('22:15:57') datenum('22:29:11');... 
datenum('22:36:18') datenum('22:44:05');... 
datenum('22:51:26') datenum('23:02:22');... 
datenum('23:09:09') datenum('23:13:29');... 
datenum('23:13:30') datenum('23:23:01');... 
datenum('23:39:05') datenum('23:51:07');... 
    ]-datenum('00:00:00')+datenum([daystr(1:4) '-' daystr(5:6) '-' daystr(7:8)]); 
 
% horilegs=[datenum('21:06:44') datenum('21:27:53') 
%      datenum('21:34:53') datenum('21:58:00')]-datenum('00:00:00')+datenum([daystr(1:4) '-' daystr(5:6) '-' daystr(7:8)]); 
groundcomparison=[datenum('13:40:50') datenum('14:12:00')]-datenum('00:00:00')+datenum([daystr(1:4) '-' daystr(5:6) '-' daystr(7:8)]); 
 
% STD-based cloud screening for direct Sun measurements 
s.sd_aero_crit=0.015; % optimized, Yohei, 2013/09/08 
 
% Ozone and other gases 
s.O3h=21; 
s.O3col=0.300;  % Yohei's guess, to be updated 
s.NO2col=5e15; % Yohei's guess, to be updated 
 
% other tweaks 
if isfield(s, 'Pst'); 
    s.Pst(find(s.Pst<10))=1013; 
end; 
if isfield(s, 'Lon') & isfield(s, 'Lat'); 
    s.Lon(s.Lon==0 & s.Lat==0)=NaN; 
    s.Lat(s.Lon==0 & s.Lat==0)=NaN; 
end; 
if isfield(s, 'AZstep') & isfield(s, 'AZ_deg'); 
    s.AZ_deg=s.AZstep/(-50); 
end; 
 
% notes 
if isfield(s, 'note'); 
    s.note(end+1,1) = {['See ' mfilename '.m for additional info. ']}; 
end; 
 
 
 
%push variable to caller 
varNames=who(); 
for i=1:length(varNames) 
  assignin('caller',varNames{i},eval(varNames{i})); 
end; 
end 

%push variable to caller
% Bad coding practice to blind-push variables to the caller.  
% Creates potential for clobbering and makes collaborative coding more
% difficult because fields appear in caller memory space undeclared.

varNames=who();
for i=1:length(varNames)
   if ~strcmp(varNames{i},'s')
  assignin('caller',varNames{i},eval(varNames{i}));
   end
end;

return

